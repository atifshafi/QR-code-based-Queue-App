name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Decode EC2 private key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY_BASE64 }}" | base64 --decode > my_decoded_private_key.pem
          chmod 600 my_decoded_private_key.pem
          echo "GITHUB_RUNNER_IP=$(curl -s https://ifconfig.me)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Add inbound rule to EC2 security group
        run: |
          # Get the security group ID
          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=group-id,Values=sg-0c8489a0dca02126b" --query 'SecurityGroups[].GroupId' --output text)
          
          # Remove existing rules with the description 'GitHub Action'
          echo 'Removing existing inbound rules with description GitHub Action...'
          EXISTING_RULES=$(aws ec2 describe-security-groups --group-id "$SECURITY_GROUP_ID" --query "SecurityGroups[].IpPermissions[] | [?Description=='GitHub Action']" --output json)
          if [ "$EXISTING_RULES" != "[]" ]; then
            aws ec2 revoke-security-group-ingress --group-id "$SECURITY_GROUP_ID" --ip-permissions "$EXISTING_RULES"
          fi
          
          # Wait for 10 seconds to ensure rule removal takes effect
          echo 'Waiting for 10 seconds...'
          sleep 10
          
          REMAINING_RULES=$(aws ec2 describe-security-groups --group-id "$SECURITY_GROUP_ID" --query "SecurityGroups[].IpPermissions[] | [?Description=='GitHub Action']" --output json)
          if [ "$REMAINING_RULES" != "[]" ]; then
            echo "Failed to remove existing rules with description GitHub Action."
          fi

          # Add new inbound rules without description
          echo 'Adding new inbound rules...'
          aws ec2 authorize-security-group-ingress --group-id "$SECURITY_GROUP_ID" --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "IpRanges": [{"CidrIp": "'"${GITHUB_RUNNER_IP}/32"'", "Description": "GitHub Action"}]}]'
          aws ec2 authorize-security-group-ingress --group-id "$SECURITY_GROUP_ID" --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "'"${GITHUB_RUNNER_IP}/32"'", "Description": "GitHub Action"}]}]'
          
          echo "Waiting 2 minutes for the security group changes to take effect"
          sleep 120

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/queue-app:latest

      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

      - name: Deploy to EC2 instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          INSTANCE_ID: ${{ secrets.INSTANCE_ID }}
        run: |
          set -x
          PRIVATE_KEY_FILE=my_decoded_private_key.pem
          USER=ec2-user
          REMOTE_DOCKER_HOST=$USER@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[].Instances[].PublicDnsName' --output text)

          # Create a tarball of the necessary files
          echo 'Creating tarball...'
          tar czf deployment.tar.gz --exclude='*.tar.gz' --exclude='*.pem' *

          # Transfer the tarball instead of all files individually
          echo 'Transferring tarball...'
          scp -i $PRIVATE_KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deployment.tar.gz $REMOTE_DOCKER_HOST:/tmp

          # Extract the tarball on the remote instance and perform deployment
          ssh -t -i $PRIVATE_KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $REMOTE_DOCKER_HOST "echo 'Extracting tarball...' && tar xzf /tmp/deployment.tar.gz -C /tmp && echo 'Logging in to ECR...' && aws ecr get-login-password --region ca-central-1 | sudo docker login --username AWS --password-stdin 750267477682.dkr.ecr.ca-central-1.amazonaws.com && echo 'Pulling latest image...' && sudo docker pull 750267477682.dkr.ecr.ca-central-1.amazonaws.com/queue-app:latest && echo 'Stopping and removing existing container if present...' && (CONTAINER_ID=$(sudo docker ps -aq --filter 'name=queue-app') && if [ ! -z \"$CONTAINER_ID\" ]; then sudo docker stop \$CONTAINER_ID && sudo docker rm -f \$CONTAINER_ID && echo 'Waiting for container removal...' && sleep 5; fi) && echo 'Checking if container is removed...' && while [ ! -z \"$(sudo docker ps -aq --filter 'name=queue-app')\" ]; do echo 'Container not removed yet, waiting...' && sleep 5; done && echo 'Pruning unused images...' && sudo docker image prune -f && echo 'Running new container...' && sudo docker run -d --name queue-app --restart always -p 80:5001 750267477682.dkr.ecr.ca-central-1.amazonaws.com/queue-app:latest"
